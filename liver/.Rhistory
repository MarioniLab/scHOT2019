gList_first_DV = patchwork::wrap_plots(gList, nrow = 1)
ggsave(gList_first_DV, file = "output/first_DV_GO.pdf",height = 4.5, width = 9)
ggsave(gList[[1]], file = "output/first_DV_gain_GO.pdf",height = 4.5, width = 4.5)
ggsave(gList[[2]], file = "output/first_DV_loss_GO.pdf",height = 4.5, width = 4.5)
# Chunk 13
sig_gain = c(names(which(sig_class == "gain")), names(which(sig_class == "loss")))
chol_DV_wVars_sig_gain = t(DCARSacrossNetwork(liver_branch_chol,
edgelist = cbind(sig_gain,sig_gain),
W = W_chol,
weightedConcordanceFunction = weightedVarMatrixStats,
verbose = TRUE,
extractWcorSequenceOnly = TRUE))
rownames(chol_DV_wVars_sig_gain) <- sig_gain
hep_DV_wVars_sig_gain = t(DCARSacrossNetwork(liver_branch_hep,
edgelist = cbind(sig_gain,sig_gain),
W = W_hep,
weightedConcordanceFunction = weightedVarMatrixStats,
verbose = TRUE,
extractWcorSequenceOnly = TRUE))
rownames(hep_DV_wVars_sig_gain) <- sig_gain
first_DV_wVars_sig_gain = first_DV_wVars[sig_gain,]
first_wVAR_comparison_df_chol = data.frame(
branch = "chol",
gene = rep(rownames(chol_DV_wVars_sig_gain), ncol(chol_DV_wVars_sig_gain)),
position = rep(1:ncol(chol_DV_wVars_sig_gain), each = nrow(chol_DV_wVars_sig_gain)),
wVAR = c(chol_DV_wVars_sig_gain),
pseudotime = liver_pseudotime_chol[rep(1:ncol(chol_DV_wVars_sig_gain), each = nrow(chol_DV_wVars_sig_gain))]
)
first_wVAR_comparison_df_hep = data.frame(
branch = "hep",
gene = rep(rownames(hep_DV_wVars_sig_gain), ncol(hep_DV_wVars_sig_gain)),
position = rep(1:ncol(hep_DV_wVars_sig_gain), each = nrow(hep_DV_wVars_sig_gain)),
wVAR = c(hep_DV_wVars_sig_gain),
pseudotime = liver_pseudotime_hep[rep(1:ncol(hep_DV_wVars_sig_gain), each = nrow(hep_DV_wVars_sig_gain))]
)
first_wVAR_comparison_df_first = data.frame(
branch = "first",
gene = rep(rownames(first_DV_wVars_sig_gain[sig_gain,]), ncol(first_DV_wVars_sig_gain[sig_gain,])),
position = rep(1:ncol(first_DV_wVars_sig_gain[sig_gain,]), each = nrow(first_DV_wVars_sig_gain[sig_gain,])),
wVAR = c(first_DV_wVars_sig_gain[sig_gain,]),
pseudotime = liver_pseudotime_chol[rep(1:ncol(first_DV_wVars_sig_gain[sig_gain,]), each = nrow(first_DV_wVars_sig_gain[sig_gain,]))]
)
first_wVAR_comparison_df = rbind(
first_wVAR_comparison_df_chol,
first_wVAR_comparison_df_hep,
first_wVAR_comparison_df_first
)
first_wVAR_comparison_df$chol_isnonDE = first_wVAR_comparison_df$gene %in% nonDE_HVG_chol
first_wVAR_comparison_df$hep_isnonDE = first_wVAR_comparison_df$gene %in% nonDE_HVG_hep
ggplot(first_wVAR_comparison_df, aes(x = pseudotime, y = wVAR, group = branch, colour = branch)) +
geom_line(size = 2) +
facet_wrap(chol_isnonDE~gene) +
theme_minimal() +
NULL
g1 = ggplot(subset(first_wVAR_comparison_df, chol_isnonDE & hep_isnonDE),
aes(x = position, y = wVAR, group = branch, colour = branch)) +
geom_line(size = 2) +
facet_wrap(~gene, scales = "free") +
theme_minimal() +
ggtitle("not DE in either") +
geom_vline(xintercept = length(first_pseudotime)) +
NULL
g1
g2 = ggplot(subset(first_wVAR_comparison_df, !chol_isnonDE & hep_isnonDE),
aes(x = position, y = wVAR, group = branch, colour = branch)) +
geom_line(size = 2) +
facet_wrap(~gene, scales = "free") +
theme_minimal() +
ggtitle("DE only in chol") +
geom_vline(xintercept = length(first_pseudotime)) +
NULL
g2
g3 = ggplot(subset(first_wVAR_comparison_df, chol_isnonDE & !hep_isnonDE),
aes(x = position, y = wVAR, group = branch, colour = branch)) +
geom_line(size = 2) +
facet_wrap(~gene, scales = "free") +
theme_minimal() +
ggtitle("DE only in hep") +
geom_vline(xintercept = length(first_pseudotime)) +
NULL
g3
g4 = ggplot(subset(first_wVAR_comparison_df, !chol_isnonDE & !hep_isnonDE),
aes(x = position, y = wVAR, group = branch, colour = branch)) +
geom_line(size = 2) +
facet_wrap(~gene, scales = "free") +
theme_minimal() +
ggtitle("DE in both hep and chol") +
geom_vline(xintercept = length(first_pseudotime)) +
NULL
g4
ggsave(g1, file = "output/first_wVAR_comparison_1.pdf",height = 10, width = 12)
ggsave(g2, file = "output/first_wVAR_comparison_2.pdf",height = 10, width = 12)
ggsave(g3, file = "output/first_wVAR_comparison_3.pdf",height = 10, width = 12)
ggsave(g4, file = "output/first_wVAR_comparison_4.pdf",height = 10, width = 12)
first_wVAR_comparison_df$branch = factor(first_wVAR_comparison_df$branch, levels = c("hep", "chol", "first"))
genesOfInterest = c("Birc5","H2afz","Tacc3", "Hmgcs2")
gList = sapply(genesOfInterest, function(geneOfInterest) {
g5 = ggplot(subset(first_wVAR_comparison_df, gene %in% geneOfInterest),
aes(x = position, y = wVAR, group = branch, colour = branch,
alpha = branch, size = branch)) +
geom_line() +
theme_minimal() +
theme(legend.position = "none") +
ggtitle(geneOfInterest) +
theme(panel.grid = element_blank()) +
xlab("Pseudotime ranking") +
ylab("Local weighted variance") +
geom_vline(xintercept = length(first_pseudotime)) +
scale_colour_tableau() +
scale_alpha_manual(values = c("chol" = 0.5, "hep" = 0.5, "first" = 1)) +
scale_size_manual(values = c("chol" = 1, "hep" = 1, "first" = 2)) +
theme(axis.title = element_text(size = 15)) +
theme(plot.title = element_text(face = "italic")) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5)) +
xlab(ifelse(geneOfInterest == genesOfInterest[1],"Pseudotime ranking","")) +
ylab(ifelse(geneOfInterest == genesOfInterest[1],"Local weighted variance","")) +
NULL
return(g5)
}, simplify = FALSE)
gList_DV_lines = wrap_plots(gList, nrow = 1)
gList_DV_lines
ggsave(gList_DV_lines, file = "output/first_DV_gain_lines_examples.pdf",
height = 3, width = 10)
# Chunk 14
# calculate the wcors for all the ordering genes pairs
if (!file.exists("output/exprs_HVG.RData")) {
hep_exprs_HVG = exprs(liver)[nonDE_HVG_hep, names(liver_pseudotime_hep)]
chol_exprs_HVG = exprs(liver)[nonDE_HVG_chol, names(liver_pseudotime_chol)]
save(hep_exprs_HVG, chol_exprs_HVG, file = "output/exprs_HVG.RData")
} else {
load("output/exprs_HVG.RData")
}
# HVG calculated over entire trajectory cells
pairs = t(combn(sort(HVG), 2))
rownames(pairs) <- apply(pairs,1,paste0, collapse = "_")
pairs_hep_all = t(combn(sort(nonDE_HVG_hep), 2))
rownames(pairs_hep_all) <- apply(pairs_hep_all,1,paste0, collapse = "_")
pairs_chol_all = t(combn(sort(nonDE_HVG_chol), 2))
rownames(pairs_chol_all) <- apply(pairs_chol_all,1,paste0, collapse = "_")
if (!file.exists("output/all_wcors.RData")) {
pairs_hep_all = t(combn(sort(nonDE_HVG_hep), 2))
rownames(pairs_hep_all) <- apply(pairs_hep_all,1,paste0, collapse = "_")
pairs_chol_all = t(combn(sort(nonDE_HVG_chol), 2))
rownames(pairs_chol_all) <- apply(pairs_chol_all,1,paste0, collapse = "_")
W_hep = weightMatrix(ncol(hep_exprs_HVG), span = 0.25)
if (parallel) {
pairs_hep_split = split.data.frame(pairs_hep_all, rep(1:ncores, length.out = nrow(pairs_hep_all)))
wcors_hep_raw = mclapply(pairs_hep_split, function(pairs){
t(DCARSacrossNetwork(hep_exprs_HVG,
edgelist = pairs,
W = W_hep,
extractWcorSequenceOnly = TRUE,
weightedConcordanceFunction = weightedSpearman,
verbose = TRUE))
}, mc.cores = ncores)
wcors_hep = do.call(rbind, wcors_hep_raw)[rownames(pairs_hep_all),]
} else {
wcors_hep = t(DCARSacrossNetwork(hep_exprs_HVG,
edgelist = pairs_hep_all,
W = W_hep,
extractWcorSequenceOnly = TRUE,
weightedConcordanceFunction = weightedSpearman,
verbose = TRUE))
}
W_chol = weightMatrix(ncol(chol_exprs_HVG), span = 0.25)
if (parallel) {
pairs_chol_split = split.data.frame(pairs_chol_all, rep(1:ncores, length.out = nrow(pairs_chol_all)))
wcors_chol_raw = mclapply(pairs_chol_split, function(pairs){
t(DCARSacrossNetwork(chol_exprs_HVG,
edgelist = pairs,
W = W_chol,
extractWcorSequenceOnly = TRUE,
weightedConcordanceFunction = weightedSpearman,
verbose = TRUE))
}, mc.cores = ncores)
wcors_chol = do.call(rbind, wcors_chol_raw)[rownames(pairs_chol_all),]
} else {
wcors_chol = t(DCARSacrossNetwork(chol_exprs_HVG,
edgelist = pairs_chol_all,
W = W_chol,
extractWcorSequenceOnly = TRUE,
weightedConcordanceFunction = weightedSpearman,
verbose = TRUE))
}
save(wcors_hep, wcors_chol, W_chol, W_hep, pairs_chol_all, pairs_hep_all, file = "output/all_wcors.RData")
} else {
load("output/all_wcors.RData")
}
# Chunk 15
if (!file.exists("output/hep_permstats.Rdata")) {
set.seed(500)
hep_stats_all = apply(wcors_hep,1,sd)
hep_globalCor_all = apply(pairs_hep_all, 1, function(x)
cor(hep_exprs_HVG[x[1],], hep_exprs_HVG[x[2],], method = "spearman")
)
hep_sample = DCARS::stratifiedSample(hep_globalCor_all, length = 500)
if (parallel) {
hep_permstats_raw = mclapply(as.list(hep_sample), function(h) {
DCARSacrossNetwork(hep_exprs_HVG,
edgelist = pairs_hep_all[h, , drop = FALSE],
W = W_hep,
weightedConcordanceFunction = weightedSpearman,
verbose = TRUE,
extractPermutationTestStatistics = TRUE,
niter = 1000)
}, mc.cores = ncores)
hep_permstats = lapply(hep_permstats_raw, unlist)
names(hep_permstats) <- rownames(pairs_hep_all[hep_sample,])
} else {
hep_permstats_raw = DCARSacrossNetwork(hep_exprs_HVG,
edgelist = pairs_hep_all[hep_sample,],
W = W_hep,
weightedConcordanceFunction = weightedSpearman,
verbose = TRUE,
extractPermutationTestStatistics = TRUE,
niter = 500)
hep_permstats = unlist(hep_permstats_raw, recursive = FALSE)
names(hep_permstats) <- rownames(pairs_hep_all[hep_sample,])
}
save(hep_permstats, hep_globalCor_all, hep_stats_all, file = "output/hep_permstats.Rdata")
} else {
load("output/hep_permstats.Rdata")
}
if (!file.exists("output/hep_p_all.Rds")) {
hep_p_all = estimatePvaluesSpearman(hep_stats_all,
hep_globalCor_all,
hep_permstats,
usenperm = FALSE,
nperm = 10000,
plot = TRUE,
maxDist = 0.1,
verbose = TRUE)
hep_p_all$fdr <- p.adjust(hep_p_all$pval, method = "BH")
saveRDS(hep_p_all, file = "output/hep_p_all.Rds")
} else {
hep_p_all <- readRDS("output/hep_p_all.Rds")
}
# Chunk 16
if (!file.exists("output/chol_permstats.Rdata")) {
set.seed(500)
chol_stats_all = apply(wcors_chol,1,sd)
chol_globalCor_all = apply(pairs_chol_all, 1, function(x)
cor(chol_exprs_HVG[x[1],], chol_exprs_HVG[x[2],], method = "spearman")
)
chol_sample = DCARS::stratifiedSample(chol_globalCor_all, length = 500)
if (parallel) {
chol_permstats_raw = mclapply(as.list(chol_sample), function(h) {
DCARSacrossNetwork(chol_exprs_HVG,
edgelist = pairs_chol_all[h, , drop = FALSE],
W = W_chol,
weightedConcordanceFunction = weightedSpearman,
verbose = TRUE,
extractPermutationTestStatistics = TRUE,
niter = 1000)
}, mc.cores = ncores)
chol_permstats = lapply(chol_permstats_raw, unlist)
names(chol_permstats) <- rownames(pairs_chol_all[chol_sample,])
} else {
chol_permstats_raw = DCARSacrossNetwork(chol_exprs_HVG,
edgelist = pairs_chol_all[chol_sample,],
W = W_chol,
weightedConcordanceFunction = weightedSpearman,
verbose = TRUE,
extractPermutationTestStatistics = TRUE,
niter = 500)
chol_permstats = unlist(chol_permstats_raw, recursive = FALSE)
names(chol_permstats) <- rownames(pairs_chol_all[chol_sample,])
}
save(chol_permstats, chol_globalCor_all, chol_stats_all, file = "output/chol_permstats.Rdata")
} else {
load("output/chol_permstats.Rdata")
}
if (!file.exists("output/chol_p_all.Rds")) {
chol_p_all = estimatePvaluesSpearman(chol_stats_all,
chol_globalCor_all,
chol_permstats,
usenperm = FALSE,
nperm = 10000,
plot = TRUE,
maxDist = 0.1,
verbose = TRUE)
chol_p_all$fdr <- p.adjust(chol_p_all$pval, method = "BH")
saveRDS(chol_p_all, file = "output/chol_p_all.Rds")
} else {
chol_p_all <- readRDS("output/chol_p_all.Rds")
}
# Chunk 17
globalCors_hep = hep_p_all$globalCor
names(globalCors_hep) <- rownames(hep_p_all)
globalCors_chol = chol_p_all$globalCor
names(globalCors_chol) <- rownames(chol_p_all)
permstatsDF_hep = data.frame(
branch = "hep",
genepair = rep(names(hep_permstats),
times = unlist(lapply(hep_permstats, function(x) length(unlist(x))))),
stat = unlist(hep_permstats))
permstatsDF_hep$globalCor = globalCors_hep[as.character(permstatsDF_hep$genepair)]
df_99_hep = data.frame(
branch = "hep",
globalCor = globalCors_hep[names(hep_permstats)], stat =  unlist(lapply(hep_permstats, quantile, 0.99)))
df_99_hep$fitted = loess(stat ~ globalCor, data = df_99_hep)$fitted
permstatsDF_chol = data.frame(
branch = "chol",
genepair = rep(names(chol_permstats), times = unlist(lapply(chol_permstats, function(x) length(unlist(x))))),
stat = unlist(chol_permstats))
permstatsDF_chol$globalCor = globalCors_chol[as.character(permstatsDF_chol$genepair)]
df_99_chol = data.frame(
branch = "chol",
globalCor = globalCors_chol[names(chol_permstats)], stat =  unlist(lapply(chol_permstats, quantile, 0.99)))
df_99_chol$fitted = loess(stat ~ globalCor, data = df_99_chol)$fitted
permstatsDF = rbind(permstatsDF_hep,
permstatsDF_chol)
df_99 = rbind(df_99_hep,
df_99_chol)
g = ggplot(permstatsDF, aes(x = globalCor, y = stat, colour = branch)) +
geom_scattermore() +
geom_point(aes(group = branch, colour = branch), data = df_99) +
geom_line(aes(y = fitted, group = branch, colour = branch), data = df_99) +
theme_classic() +
ylab("Permuted test statistic") +
xlab("Global correlation") +
theme(panel.grid = element_blank())
ggsave(g, file = "output/stats_globalCor.pdf", height = 8, width = 8)
FDR_level = 0.2
pairs_hep_sig = pairs_hep_all[rownames(subset(hep_p_all, fdr < FDR_level)),]
wcors_hep_sig = wcors_hep[rownames(pairs_hep_sig),]
dim(pairs_hep_sig)
length(unique(c(pairs_hep_sig)))
wcors_hep_sig_smooth = t(apply(wcors_hep_sig,1,function(x){
loess(x ~ I(1:length(x)))$fitted
}))
hc = hclust(dist(wcors_hep_sig_smooth, method = "maximum"), method = "ward.D2")
wcors_hep_sig_clusterGenes = cutreeDynamic(
hc,
minClusterSize = 10,
method = "tree",
deepSplit = TRUE,
useMedoids = TRUE
)
k_hep = length(unique(wcors_hep_sig_clusterGenes))
k_hep
wcors_hep_sig_clusterGenes = cutree(hc, k = k_hep-1)
names(wcors_hep_sig_clusterGenes) <- hc$labels
saveRDS(wcors_hep_sig_clusterGenes, file = "output/wcors_hep_sig_clusterGenes.Rds")
hep_sig_table = cbind(hep_p_all[rownames(pairs_hep_sig),], cluster = wcors_hep_sig_clusterGenes)
wcors_hep_sig_clusterGenes_list = lapply(split(names(wcors_hep_sig_clusterGenes), wcors_hep_sig_clusterGenes), function(h) sort(unique(c(pairs_hep_all[h,]))))
length(wcors_hep_sig_clusterGenes_list)
wcors_hep_sig_mean = apply(wcors_hep_sig, 2, function(x){
tapply(x,wcors_hep_sig_clusterGenes, mean)
})
sigOrder = rev(paste0("Cluster ",rownames(wcors_hep_sig_mean)[heatmap.2(wcors_hep_sig_mean)$rowInd]))
wcors_hep_sigLong = reshape::melt(t(wcors_hep_sig))
wcors_hep_sigLong$cluster = paste0("Cluster ", wcors_hep_sig_clusterGenes[as.character(wcors_hep_sigLong$X2)])
wcors_hep_sigLong$cluster <- factor(wcors_hep_sigLong$cluster,
levels = sigOrder
)
gh = geom_hline(yintercept = 0, linetype = "dotted", colour = "red", size = 1)
g = ggplot(
wcors_hep_sigLong,
aes(x = X1, y = value, group = X2)) +
theme_minimal() +
theme(panel.grid = element_blank()) +
ylim(c(-1,1)) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5)) +
xlab("Pseudotime") +
ylab("Local weighted correlation") +
NULL
numSummary_df = data.frame(cluster = sort(unique(wcors_hep_sigLong$cluster)),
num = tapply(wcors_hep_sigLong$X2, wcors_hep_sigLong$cluster, length)/max(wcors_hep_sigLong$X1))
g1 = g +
geom_line() +
theme(axis.text.x = element_blank()) +
theme(axis.line.y = element_line()) +
facet_wrap(~cluster, ncol = length(unique(wcors_hep_sigLong$cluster)), scales = "free") +
theme(strip.text = element_text(size = 12)) +
geom_text(data = numSummary_df,
aes(label = paste0(num, " gene pairs")),
x = 200, y = -0.8, inherit.aes = FALSE) +
xlab("Pseudotime Ranking") +
theme(axis.title = element_text(size = 15)) +
theme(axis.line.y = element_line()) +
scale_y_continuous(breaks = c(-1,0,1), labels = c(-1,0,1), limits = c(-1, 1)) +
geom_hline(yintercept = 0, colour = "black", linetype = "solid", size = 0.5) +
NULL
g1
wcors_hep_sig_clusterGenes
saveRDS(wcors_hep_sig_clusterGenes, file = "output/wcors_hep_sig_clusterGenes.Rds")
pairs_chol_sig = pairs_chol_all[rownames(subset(chol_p_all, fdr < FDR_level)),]
dim(pairs_chol_sig)
wcors_chol_sig = wcors_chol[rownames(pairs_chol_sig),]
wcors_chol_sig_smooth = t(apply(wcors_chol_sig,1,function(x){
loess(x ~ I(1:length(x)))$fitted
}))
hc = hclust(dist(wcors_chol_sig_smooth, method = "maximum"), method = "ward.D2")
wcors_chol_sig_clusterGenes = cutreeDynamic(
hc,
minClusterSize = 5,
method = "tree",
deepSplit = TRUE,
useMedoids = TRUE
)
length(unique(wcors_chol_sig_clusterGenes))
wcors_chol_sig_clusterGenes = cutree(hc, k = length(unique(wcors_chol_sig_clusterGenes))-1)
names(wcors_chol_sig_clusterGenes) <- hc$labels
saveRDS(wcors_chol_sig_clusterGenes, file = "output/wcors_chol_sig_clusterGenes.Rds")
length(unique(wcors_chol_sig_clusterGenes))
wcors_chol_sig_clusterGenes_list = lapply(split(names(wcors_chol_sig_clusterGenes), wcors_chol_sig_clusterGenes), function(h) sort(unique(c(pairs_chol_all[h,]))))
wcors_chol_sig_mean = apply(wcors_chol_sig, 2, function(x){
tapply(x,wcors_chol_sig_clusterGenes, mean)
})
heatmap.2(wcors_chol_sig, trace = "n", Colv = FALSE,
col = colorRampPalette(c("blue","white","red"))(100),
margins = c(8,8),
RowSideColors = tol12qualitative[wcors_chol_sig_clusterGenes])
matplot(t(wcors_chol_sig_mean), type = "l", lwd = 3)
wcors_chol_sig_clusterGenes_membership = do.call(cbind, lapply(wcors_chol_sig_clusterGenes_list, function(x){
v = 1*(sort(unique(unlist(wcors_chol_sig_clusterGenes_list))) %in% x)
names(v) <- sort(unique(unlist(wcors_chol_sig_clusterGenes_list)))
return(v)
}))
jacDist = (t(wcors_chol_sig_clusterGenes_membership) %*% wcors_chol_sig_clusterGenes_membership) / (nrow(wcors_chol_sig_clusterGenes_membership) - ((1 - t(wcors_chol_sig_clusterGenes_membership)) %*% (1 - wcors_chol_sig_clusterGenes_membership)))
heatmap.2(jacDist, trace = "n", main = "Jaccard distance of genes within clusters",
density.info = "none",
key.title = "",
key.xlab = "Jaccard distance",
symm = TRUE,
revC = TRUE,
col = colorRampPalette(c("black","yellow")))
sigOrder = rev(paste0("Cluster ",rownames(wcors_chol_sig_mean)[heatmap.2(wcors_chol_sig_mean)$rowInd]))
wcors_chol_sigLong = reshape::melt(t(wcors_chol_sig))
wcors_chol_sigLong$cluster = paste0("Cluster ", wcors_chol_sig_clusterGenes[as.character(wcors_chol_sigLong$X2)])
wcors_chol_sigLong$cluster <- factor(wcors_chol_sigLong$cluster,
levels = sigOrder
)
gh = geom_hline(yintercept = 0, linetype = "dotted", colour = "red", size = 1)
g = ggplot(
wcors_chol_sigLong,
aes(x = X1, y = value, group = X2)) +
theme_minimal() +
theme(panel.grid = element_blank()) +
ylim(c(-1,1)) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5)) +
xlab("Pseudotime") +
ylab("Local weighted correlation") +
NULL
numSummary_df = data.frame(cluster = sort(unique(wcors_chol_sigLong$cluster)),
num = tapply(wcors_chol_sigLong$X2, wcors_chol_sigLong$cluster, length)/max(wcors_chol_sigLong$X1))
g1 = g +
geom_line() +
theme(axis.text.x = element_blank()) +
theme(axis.line.y = element_line()) +
facet_wrap(~cluster, ncol = 9, scales = "free") +
theme(strip.text = element_text(size = 12)) +
geom_text(data = numSummary_df,
aes(label = paste0(num, " gene pairs")),
x = 200, y = -0.8, inherit.aes = FALSE) +
xlab("Pseudotime Ranking") +
theme(axis.title = element_text(size = 15)) +
theme(axis.line.y = element_line()) +
scale_y_continuous(breaks = c(-1,0,1), labels = c(-1,0,1), limits = c(-1, 1)) +
geom_hline(yintercept = 0, colour = "black", linetype = "solid", size = 0.5) +
NULL
g1
ggsave(g1, file = "output/chol_wcors_all_clustered.pdf", height = 3.5, width = 1.6*length(unique(wcors_chol_sigLong$cluster)))
if (!file.exists("output/chol_superclusterGenes_GO.Rds")) {
chol_superclusterGenes_GO = lapply(wcors_chol_sig_clusterGenes_list, function(set) {
print("testing..")
genesetGOtest(set, rownames(liver), GO_list)
}
)
saveRDS(chol_superclusterGenes_GO, file = "output/chol_superclusterGenes_GO.Rds")
} else {
chol_superclusterGenes_GO = readRDS("output/chol_superclusterGenes_GO.Rds")
}
gList = lapply(chol_superclusterGenes_GO, function(pval) {
df = data.frame(term = factor(names(pval), levels = c(names(pval), "")),
pval = pval)
df$label = df$term
df$label[pval != 1] <- ""
df_sorted = sort_df(df, "pval")[1:10,]
df_sorted$term = factor(df_sorted$term, levels =  rev(df_sorted$term))
g = ggplot(df_sorted, aes(x = term, y = -log10(pval), fill = pval < 0.01)) +
theme_classic() +
geom_col() +
coord_flip() +
xlab("") +
ylab(expression("-log10(P-value)")) +
geom_hline(yintercept = -log10(0.01), colour = "red", linetype = "dashed", size = 1.2) +
scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "black")) +
theme(legend.position = "none") +
NULL
return(g)
})
gList_named = sapply(seq_len(length(gList)), function(i){
g = gList[[i]] +
scale_fill_manual(values = c("TRUE" = "dimgrey", "FALSE" = "red")) +
ggtitle(paste0("Cluster ",names(gList)[i])) +
theme(axis.text.y = element_text(size = 10)) +
theme(title = element_text(hjust = 0.5)) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 40)) +
NULL
ggsave(g, file = paste0("output/chol_superclusters_GO_", i, ".pdf"),
height = 4, width = 7)
return(g)
}, simplify = FALSE)
g_named = patchwork::wrap_plots(gList_named, nrow = 1)
g_named = patchwork::wrap_plots(gList_named, nrow = 2)
g_named
ggsave(g_named, file = "output/chol_superclusters_GO.pdf",height = 10, width = 20)
