names(split_df) <- NULL
sampled_permstats = mclapply(split_df, function(s) {
res = DCARSacrossNetwork(counts,
s,
W = W,
weightedConcordanceFunction = weightedSpearman,
extractPermutationTestStatistics = TRUE,
niter = 1000,
verbose = TRUE)
res = lapply(res, unlist)
names(res) <- rownames(s)
return(res)
})
sampled_permstats = unlist(sampled_permstats, recursive = FALSE)
sampled_permstats <- sampled_permstats[rownames(pairs_sampled)]
}
save(sampled_permstats, pairs_sampled, globalCor, file = "output/sampled_permstats.Rdata")
beepr::beep()
permstatsDF = data.frame(
genepair = rep(names(sampled_permstats), times = unlist(lapply(sampled_permstats, function(x) length(unlist(x))))),
stat = unlist(sampled_permstats)
)
permstatsDF$globalCor = globalCor[as.character(permstatsDF$genepair)]
df_99 = data.frame(
genepair = names(sampled_permstats),
globalCor = globalCor[names(sampled_permstats)],
stat_999 = unlist(lapply(sampled_permstats, function(x) quantile(unlist(x), 0.999))),
stat_99 = unlist(lapply(sampled_permstats, function(x) quantile(unlist(x), 0.99))),
stat_95 = unlist(lapply(sampled_permstats, function(x) quantile(unlist(x), 0.95))),
stat_90 = unlist(lapply(sampled_permstats, function(x) quantile(unlist(x), 0.90)))
)
df_99$fitted_999 = loess(stat_999 ~ globalCor, data = df_99)$fitted
df_99$fitted_99 = loess(stat_99 ~ globalCor, data = df_99)$fitted
df_99$fitted_95 = loess(stat_95 ~ globalCor, data = df_99)$fitted
df_99$fitted_90 = loess(stat_90 ~ globalCor, data = df_99)$fitted
g = ggplot(permstatsDF, aes(x = globalCor, y = stat)) +
theme_classic() +
geom_scattermore() +
geom_point(aes(y = stat_999, colour = "0.999"), data = df_99) +
geom_line(aes(y = fitted_999, colour = "0.999"), data = df_99) +
geom_point(aes(y = stat_99, colour = "0.99"), data = df_99) +
geom_line(aes(y = fitted_99, colour = "0.99"), data = df_99) +
geom_point(aes(y = stat_95, colour = "0.95"), data = df_99) +
geom_line(aes(y = fitted_95, colour = "0.95"), data = df_99) +
geom_point(aes(y = stat_90, colour = "0.90"), data = df_99) +
geom_line(aes(y = fitted_90, colour = "0.90"), data = df_99) +
scale_colour_manual(values = c("0.999" = tol12qualitative[4],
"0.99" = tol12qualitative[3],
"0.95" = tol12qualitative[2],
"0.90" = tol12qualitative[1])) +
labs(colour = "Quantile") +
theme(panel.grid = element_blank()) +
xlab("Global Correlation") +
ylab("Permuted test statistics") +
theme(legend.position = "bottom")
g
ggsave(g, file = "output/stats_globalCor_2d.pdf", height = 8, width = 8)
p_all = estimatePvaluesSpearman(stats_all,
globalCor,
sampled_permstats,
usenperm = TRUE,
nperm = 10000,
plot = FALSE,
maxDist = 2,
verbose = TRUE)
p_all$fdr <- p.adjust(p_all$pval, method = "BH")
save(p_all, stats_all, wcors_all, file = "output/2D_p_all.Rdata")
p_all$gene1 = unlist(lapply(strsplit(as.character(p_all$genepair), "_"), "[", 1))
p_all$gene2 = unlist(lapply(strsplit(as.character(p_all$genepair), "_"), "[", 2))
# differentially expressed genes to remove
p_all$spatiallyDE = ifelse(as.character(p_all$gene1) %in% nonDEgenes & as.character(p_all$gene2) %in% nonDEgenes,"No", "DE")
dim(subset(p_all, spatiallyDE == "No"))
nonDEfdr = p_all$pval
nonDEfdr[p_all$spatiallyDE == "DE"] <- NA
nonDEfdr = p.adjust(nonDEfdr, method = "BH")
nonDEfdr[is.na(nonDEfdr)] <- 1
p_all$nonDEfdr = nonDEfdr
getDF = function(gene1, gene2 = NULL) {
if (length(gene1) > 1) {
gene2 = gene1[2]
gene1 = gene1[1]
}
#print(gene1)
#print(gene2)
gpair = paste0(gene1,"_",gene2)
if (!gpair %in% rownames(wcors_all)) {
gpair = paste0(gene2,"_",gene1)
}
wcor = wcors_all[gpair,]
df_res = data.frame(x = coords[,"x"],
y = coords[,"y"],
g1 = expr[gene1,],
g2 = expr[gene2,],
wcor = wcor,
W_min = W[which.min(wcor),],
W_max = W[which.max(wcor),])
return(df_res)
}
basicplotFunction = function(gene1, gene2 = NULL) {
require(ggforce)
require(patchwork)
if (length(gene1) > 1) {
gene2 = gene1[2]
gene1 = gene1[1]
}
#print(gene1)
#print(gene2)
df_res = getDF(gene1, gene2)
t = theme(legend.key.width = unit(0.5, "inches")) +
theme(plot.title = element_text(size = 20)) +
theme(axis.title = element_text(size = 15))
g_gene1 = ggplot(df_res, aes(x = -x, y = y)) +
geom_point(aes(colour = g1), size = 5) +
theme_minimal() +
theme(panel.grid = element_blank()) +
theme(axis.text = element_blank()) +
xlab("") +
ylab("") +
ggtitle(gene1) +
labs(colour = "") +
theme(legend.position = "bottom") +
theme(plot.title = element_text(hjust = 0.5, face = "italic")) +
scale_color_viridis_c(breaks = c(0,max(df_res$g1)),
limits = c(0,max(df_res$g1)),
labels = c("Low","High")) +
t +
coord_fixed() +
guides(colour = guide_colourbar(title.position = "top",
title.hjust = 0.5)) +
theme(legend.title=element_text(size=15)) +
labs(colour = "Expression") +
NULL
g_gene2 = ggplot(df_res, aes(x = -x, y = y)) +
geom_point(aes(colour = g2), size = 5) +
theme_minimal() +
theme(panel.grid = element_blank()) +
theme(axis.text = element_blank()) +
xlab("") +
ylab("") +
ggtitle(gene2) +
theme(plot.title = element_text(hjust = 0.5, face = "italic")) +
labs(colour = "") +
theme(legend.position = "bottom") +
scale_color_viridis_c(breaks = c(0,max(df_res$g1)),
limits = c(0,max(df_res$g1)),
labels = c("Low","High")) +
t +
coord_fixed() +
theme(legend.position = "none") +
NULL
g2 = ggplot(df_res, aes(x = -x, y = y, fill = wcor)) +
geom_voronoi_tile(max.radius = 1) +
theme_minimal() +
theme(panel.grid = element_blank()) +
theme(axis.text = element_blank()) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position = "bottom") +
labs(colour = "",fill = "") +
labs(colour = "Local correlation",fill = "Local correlation") +
ylab("") +
xlab("") +
ggtitle("Correlation of both genes") +
scale_alpha_continuous(range = c(0,0.5)) +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", limits = c(-1,1)) +
t +
coord_fixed() +
guides(fill = guide_colourbar(title.position = "top",
title.hjust = 0.5)) +
theme(legend.title=element_text(size=15)) +
NULL
require(ggpubr)
g_gene1_leg = as_ggplot(get_legend(g_gene1))
g2_leg = as_ggplot(get_legend(g2))
scater::multiplot(g_gene1 + theme(legend.position = "none") +
theme(plot.margin = margin(10,0,-10,0)),
g_gene2 +
theme(plot.margin = margin(10,0,-10,0)),
g2 + theme(legend.position = "none") +
theme(plot.margin = margin(10,0,-10,0)),
g_gene1_leg,
g2_leg,
layout = matrix(
c(1,1,2,2,3,3,
1,1,2,2,3,3,
1,1,2,2,3,3,
6,4,4,6,5,5), ncol = 6, byrow = TRUE))
}
plotFunction = function(gene1, gene2 = NULL) {
require(ggforce)
require(patchwork)
if (length(gene1) > 1) {
gene2 = gene1[2]
gene1 = gene1[1]
}
#print(gene1)
#print(gene2)
df_res = getDF(gene1, gene2)
g_W_min = ggplot(df_res, aes(x = g1, y = g2)) +
geom_point(aes(alpha = W_min, size = W_min), colour = "purple") +
theme_minimal() +
xlab(gene1) +
ylab(gene2) +
ggtitle("Min") +
NULL
g_W_max = ggplot(df_res, aes(x = g1, y = g2)) +
geom_point(aes(alpha = W_max, size = W_max), colour = "orange") +
theme_minimal() +
xlab(gene1) +
ylab(gene2) +
ggtitle("Max") +
NULL
g_xy = ggplot(df_res, aes(x = x, y = y)) +
geom_point(size = 0.1) +
geom_density_2d(data = subset(df_res, W_max != 0), colour = "orange") +
geom_density_2d(data = subset(df_res, W_min != 0), colour = "purple") +
theme_minimal() +
xlab("x coordinate") +
ylab("y coordinate") +
ggtitle("Positions") +
NULL
g_gene1 = ggplot(df_res, aes(x = x, y = y)) +
geom_point(aes(colour = g1), size = 5) +
theme_minimal() +
ggtitle(gene1) +
scale_color_gradient2(low = "black", mid = "yellow", high = "red", midpoint = 2) +
NULL
g_gene2 = ggplot(df_res, aes(x = x, y = y)) +
geom_point(aes(colour = g2), size = 5) +
theme_minimal() +
ggtitle(gene2) +
scale_color_gradient2(low = "black", mid = "yellow", high = "red", midpoint = 2) +
NULL
g2 = ggplot(df_res, aes(x = x, y = y, fill = wcor)) +
geom_voronoi_tile(max.radius = 1) +
geom_point(size = 1, colour = "black") +
theme_minimal() +
scale_alpha_continuous(range = c(0,0.5)) +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", limits = c(-1,1)) +
NULL
return(g_gene1 + g_gene2 + g2 +
g_W_min + g_W_max + g_xy + plot_layout(ncol = 3, nrow = 2, byrow = TRUE))
}
FDR_level = 0.2
wcorsSig = wcors_all[p_all$nonDEfdr < FDR_level,]
pairsSig = pairs[p_all$nonDEfdr < FDR_level,]
dim(wcorsSig)
View(pairsSig)
cellsCut = cutree(hclust(cordist(t(wcorsSig))), 20)
table(cellsCut)
sort(table(cellsCut))
df_res = getDF(pairs[1,])
df_res$cellsCut <- factor(cellsCut)
ggplot(df_res, aes(x = x, y = y, fill = cellsCut, colour = cellsCut)) +
geom_point(size = 7, shape = 21, stroke = 1.5, colour = "black") +
theme_minimal() +
scale_alpha_continuous(range = c(0,0.5)) +
NULL
ggsave(file = "output/cellsCluster_spatial.pdf", height = 8, width = 10)
hc = hclust(dist(wcorsSig, method = "maximum"), method = "ward.D2")
genepairsClustDynamic = cutreeDynamic(
hc,
minClusterSize = 10,
method = "tree",
deepSplit = TRUE,
useMedoids = FALSE
)
kk = length(unique(genepairsClustDynamic))-1
kk
genepairsClust = cutree(hc, k = kk)
plot(hc)
table(genepairsClust)
sort(table(genepairsClust))
p_sig = cbind(p_all[names(genepairsClust),], cluster = genepairsClust)
saveRDS(p_sig, file = "output/p_sig.Rds")
write.table(as.matrix(sort_df(p_sig, c("cluster","genepair"))),
file = "output/sig_genepairs.tsv", row.names = FALSE,
col.names = TRUE, quote = FALSE, sep = "\t")
write.table(as.matrix(genepairsClust), file = "output/genepairsClust.tsv", row.names = TRUE,
col.names = FALSE, quote = FALSE, sep = "\t")
genepairs_split = lapply(split(names(genepairsClust), genepairsClust), function(x) t(do.call(cbind, strsplit(x, "_"))))
genepairs_split_genes = lapply(genepairs_split, function(x) sort(unique(c(x))))
sapply(names(genepairs_split_genes), function(i){
write(genepairs_split_genes[[i]], file = paste0("output/cluster_", i,".txt"))
})
geneClustMembers = sapply(unique(genepairsClust), function(x)
unique(c(pairsSig[genepairsClust == x,])), simplify = FALSE)
names(geneClustMembers) <- paste0("cluster_", unique(genepairsClust))
jacDist_pairs = expand.grid(names(geneClustMembers),names(geneClustMembers))
jacDist_vals = apply(jacDist_pairs,1,function(x){
if (x[1] == x[2]) return(NA)
set1 = geneClustMembers[[x[1]]]
set2 = geneClustMembers[[x[2]]]
return(length(intersect(set1,set2))/length(union(set1,set2)))
})
jacDist = as.matrix(reshape::cast(cbind(jacDist_pairs, jacDist_vals), formula = Var2 ~ Var1, value = "jacDist_vals"))
pdf("output/jacDist_clusters.pdf", height = 8, width = 8)
heatmap.2(jacDist, trace = "n", main = "Jaccard distance of genes within clusters",
density.info = "none",
key.title = "",
key.xlab = "Jaccard distance",
symm = TRUE,
revC = TRUE)
dev.off()
meanwcorsSig = apply(wcorsSig, 2, function(x) {
tapply(x, genepairsClust, mean)
})
rownames(meanwcorsSig) <- paste0("cluster_", 1:length(unique(genepairsClust)))
pdf("output/meanGenes_heatmap.pdf", height = 12, width = 24)
heatmap.2(meanwcorsSig, trace = "n", col = colorRampPalette(c("blue","white","red")),
key.title = "",
key.xlab = "Mean weighted correlation",
main = "Mean weighted correlation of clustered genepairs")
dev.off()
df_res2 <- getDF(pairs[1,])
df_res2 <- cbind(df_res2, t(meanwcorsSig))
gList_cells <- sapply(rownames(meanwcorsSig), function(name) {
ggplot(df_res2, aes(x = -x, y = y, fill = get(name))) +
geom_voronoi_tile(max.radius = 1) +
# geom_point(aes(alpha = g1), size = 4, colour = "red") +
# geom_point(aes(alpha = g2), size = 4, colour = "green") +
geom_point(size = 0.5, colour = "black") +
theme_minimal() +
scale_alpha_continuous(range = c(0,0.5)) +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", limits = c(-1,1)) +
# geom_vline(xintercept = 0.5, linetype = "dotted") +
# geom_hline(yintercept = 0.5, linetype = "dotted") +
# ggtitle(name) +
ggtitle("") +
theme(legend.position = "none") +
theme(panel.grid = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(axis.text = element_blank()) +
xlab("") + ylab("") +
# ggtitle(gsub("_"," ", name)) +
theme(plot.title = element_text(hjust = 0.5)) +
coord_fixed() +
NULL
}, simplify = FALSE)
gAll = patchwork::wrap_plots(gList_cells, ncol = length(gList_cells)/5, nrow = 5)
gAll
ggsave(gAll, file = "output/genepairsClust_wcors.pdf", height = 5, width = 44)
hc_mean_cells = hclust(dist(t(wcorsSig), method = "maximum"), method = "ward.D2")
hc_mean_cells_groups = cutreeDynamic(
hc_mean_cells,
minClusterSize = 10,
method = "tree",
deepSplit = FALSE,
useMedoids = FALSE
)
kk_cells = length(unique(hc_mean_cells_groups))-1
kk_cells
hc_mean_cells_groups = cutree(hc_mean_cells, kk_cells)
plot(hc_mean_cells)
plot(hc_mean_cells, labels = hc_mean_cells_groups)
hc_mean_cells_fac = factor(hc_mean_cells_groups, levels = unique(hc_mean_cells_groups[hc_mean_cells$order]))
df_hc_mean_cells = data.frame(
x = coords[,1],
y = coords[,2],
hc_mean_cells = hc_mean_cells_fac
)
s = 1
g_cells = ggplot(df_hc_mean_cells, aes(x = -x, y = y)) +
geom_point(data = df_hc_mean_cells[,1:2], alpha = 0.2, stroke = 0, size = s, pch = 16) +
geom_point(stroke = 0, size = s, pch = 16) +
facet_grid(hc_mean_cells~.) +
theme_minimal() +
theme(panel.grid = element_blank(),
axis.text = element_blank()) +
xlab("") +
ylab("") +
coord_fixed() +
NULL
g_cells
ggsave(g_cells, file = "output/split_heatmap_cells.pdf",height = 7, width = 1.5)
hc_mean_genepairs = hc
hc_mean_genepairs_groups = genepairsClust
plot(hc_mean_genepairs)
plot(hc_mean_genepairs, labels = hc_mean_genepairs_groups)
hc_mean_genepairs_fac = factor(hc_mean_genepairs_groups, levels = unique(hc_mean_genepairs_groups[hc_mean_genepairs$order]))
split(names(hc_mean_genepairs_fac), hc_mean_genepairs_fac)
write.table(sort_df(data.frame(grouping = hc_mean_genepairs_fac, cluster = names(hc_mean_genepairs_fac)), "grouping"), file = "output/hc_mean_genepairs_fac_split.txt", col.names = TRUE, row.names = FALSE, quote = FALSE, sep = "\t")
hc_mean_meanwcorsSig = apply(wcorsSig, 2, function(x)
tapply(x, hc_mean_genepairs_fac, mean)
)
df_hc_mean_genepairs = data.frame(
x = rep(coords[,1],times = nrow(hc_mean_meanwcorsSig)),
y = rep(coords[,2],times = nrow(hc_mean_meanwcorsSig)),
hc_mean_genepairs = factor(rep(levels(hc_mean_genepairs_fac), each = ncol(meanwcorsSig)),
levels = levels(hc_mean_genepairs_fac)),
hc_mean_genepairs_wc = c(t(hc_mean_meanwcorsSig))
)
g_mean = ggplot(df_hc_mean_genepairs, aes(x = -x, y = y, colour = hc_mean_genepairs_wc)) +
geom_point(size = 0.7) +
facet_grid(~hc_mean_genepairs) +
theme_minimal() +
theme(panel.grid = element_blank(),
axis.text = element_blank()) +
scale_colour_gradient2(low = "blue", mid = "white", high = "red", limits = c(-1,1)) +
theme(legend.position = "none") +
xlab("") +
ylab("") +
coord_fixed() +
NULL
g_mean
cowplot::ggsave2(g_mean, file = "output/split_heatmap_genepairs.pdf", height = 1.3, width = 9)
pdf("output/split_heatmap.pdf",height = 10, width = 15)
tmat = t(wcorsSig)
colnames(tmat) <- gsub("cluster_","", colnames(tmat))
h = ComplexHeatmap::Heatmap(tmat,
cluster_columns = hc_mean_genepairs,
cluster_rows = hc_mean_cells,
row_dend_reorder = FALSE,
column_dend_reorder = FALSE,
# split = 10,
row_split = kk_cells,
column_split = kk,
show_heatmap_legend = FALSE,
show_column_names = FALSE
)
print(h)
dev.off()
grob = grid.grabExpr(draw(h))
tmatmean = t(apply(tmat, 1, function(x) tapply(x, hc_mean_genepairs_fac, mean)))
hh = ComplexHeatmap::Heatmap(tmatmean,
# cluster_columns = hc_mean_genepairs,
cluster_columns = FALSE,
cluster_rows = hc_mean_cells,
row_dend_reorder = FALSE,
column_dend_reorder = FALSE,
# split = 10,
row_split = kk_cells,
# column_split = 10,
# column_split = nn,
show_heatmap_legend = FALSE,
show_column_names = FALSE,
column_title = "Gene pair clusters",
row_title = "Cells",
row_title_gp = gpar(fontsize = 20),
column_title_gp = gpar(fontsize = 20),
border = "black"
)
hh
grobh = grid.grabExpr(draw(hh))
# combine these for a single big plot
# cowplot::plot_grid(grob,g_1,ncol=2)
pdf("output/split_heatmap_combined.pdf",height = 7, width = 11, useDingbats = FALSE)
cowplot::plot_grid(grob,
g_cells + theme(plot.margin = margin(2,0.5,0.2,-0.5,unit = "cm")) +
theme(strip.text = element_blank()),
g_mean + theme(plot.margin = margin(0,0,0,1.5, unit = "cm")) +
theme(strip.text = element_blank()) +
NULL
,
ncol = 2,
rel_heights = c(7,1),
rel_widths = c(9,1))
dev.off()
# height 7 width 8
pdf("output/split_heatmap_combined_summarised.pdf",height = 8, width = 9, useDingbats = FALSE)
cowplot::plot_grid(grobh,
g_cells +
theme(plot.margin = margin(1.3,0.5,-0.2,-0.5,unit = "cm")) +
theme(strip.text = element_blank()),
g_mean +
theme(plot.margin = margin(0,0,0,1.5, unit = "cm")) +
theme(strip.text = element_blank()),
ncol = 2,
rel_heights = c(8,1),
rel_widths = c(8,1))
dev.off()
superclusterstotest_GO = lapply(geneClustMembers, function(set) {
# genesetGOtest(set, HVG, GO_list)
print("testing..")
genesetGOtest(set, rownames(counts), GO_list)
}
)
beepr::beep()
saveRDS(superclusterstotest_GO, file = "output/superclusterstotest_GO.Rds")
gList = lapply(superclusterstotest_GO, function(pval) {
df = data.frame(term = factor(names(pval), levels = c(names(pval), "")),
pval = pval)
df$label = df$term
df$label[pval != 1] <- ""
df_sorted = sort_df(df, "pval")[1:10,]
df_sorted$term = factor(df_sorted$term, levels =  rev(df_sorted$term))
g = ggplot(df_sorted, aes(x = term, y = -log10(pval), fill = pval < 0.01)) +
theme_classic() +
geom_col() +
coord_flip() +
xlab("") +
ylab("-log10(P-value)") +
geom_hline(yintercept = -log10(0.01), colour = "red", linetype = "dashed", size = 1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 30)) +
scale_fill_manual(values = c("TRUE" = "darkgrey", "FALSE" = "black")) +
theme(legend.position = "none") +
NULL
return(g)
})
# patchwork::wrap_plots(gList, nrow = 1)
gTogether = sapply(seq_len(length(gList)), function(i){
g_1 = gList[[i]] +
theme(axis.text = element_text(size = 12))
n = ggtitle(paste0("Cluster ",i))
g_2 = gList_cells[[i]] + theme(title = element_text(size = 20)) +
coord_fixed()
pdf(paste0("output/go_cluster_plot_cluster_",i,".pdf"),
height = 7, width = 4.5)
scater::multiplot(g_2 + n, g_1 + ylab(""), layout = matrix(c(1,1,2,2,2), ncol = 1))
dev.off()
return(g_1 + g_2)
}, simplify = FALSE)
beepr::beep()
